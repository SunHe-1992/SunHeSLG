//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.SLG
{

public sealed partial class SkillData :  Bright.Config.BeanBase 
{
    public SkillData(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["SkillName"].IsString) { throw new SerializationException(); }  SkillName = _json["SkillName"]; }
        { if(!_json["AttackMultiplier"].IsNumber) { throw new SerializationException(); }  AttackMultiplier = _json["AttackMultiplier"]; }
        { if(!_json["AttackCount"].IsNumber) { throw new SerializationException(); }  AttackCount = _json["AttackCount"]; }
        { if(!_json["RangeMin"].IsNumber) { throw new SerializationException(); }  RangeMin = _json["RangeMin"]; }
        { if(!_json["RangeMax"].IsNumber) { throw new SerializationException(); }  RangeMax = _json["RangeMax"]; }
        { var __json0 = _json["Weapon"]; if(!__json0.IsArray) { throw new SerializationException(); } Weapon = new System.Collections.Generic.List<SLG.WeaponType>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { SLG.WeaponType __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (SLG.WeaponType)__e0.AsInt; }  Weapon.Add(__v0); }   }
        { if(!_json["AllowVantage"].IsBoolean) { throw new SerializationException(); }  AllowVantage = _json["AllowVantage"]; }
        { if(!_json["AllowFollowUp"].IsBoolean) { throw new SerializationException(); }  AllowFollowUp = _json["AllowFollowUp"]; }
        { if(!_json["AllowAlacrity"].IsBoolean) { throw new SerializationException(); }  AllowAlacrity = _json["AllowAlacrity"]; }
        { if(!_json["AllowCounter"].IsBoolean) { throw new SerializationException(); }  AllowCounter = _json["AllowCounter"]; }
        PostInit();
    }

    public SkillData(int ID, string SkillName, float AttackMultiplier, int AttackCount, int RangeMin, int RangeMax, System.Collections.Generic.List<SLG.WeaponType> Weapon, bool AllowVantage, bool AllowFollowUp, bool AllowAlacrity, bool AllowCounter ) 
    {
        this.ID = ID;
        this.SkillName = SkillName;
        this.AttackMultiplier = AttackMultiplier;
        this.AttackCount = AttackCount;
        this.RangeMin = RangeMin;
        this.RangeMax = RangeMax;
        this.Weapon = Weapon;
        this.AllowVantage = AllowVantage;
        this.AllowFollowUp = AllowFollowUp;
        this.AllowAlacrity = AllowAlacrity;
        this.AllowCounter = AllowCounter;
        PostInit();
    }

    public static SkillData DeserializeSkillData(JSONNode _json)
    {
        return new SLG.SkillData(_json);
    }

    public int ID { get; private set; }
    public string SkillName { get; private set; }
    /// <summary>
    /// attack percent
    /// </summary>
    public float AttackMultiplier { get; private set; }
    public int AttackCount { get; private set; }
    public int RangeMin { get; private set; }
    public int RangeMax { get; private set; }
    /// <summary>
    /// weapon type restrict, empty=no restrict
    /// </summary>
    public System.Collections.Generic.List<SLG.WeaponType> Weapon { get; private set; }
    /// <summary>
    /// allow foe&#39;s vantage skill
    /// </summary>
    public bool AllowVantage { get; private set; }
    /// <summary>
    /// allow self&#39;s follow up
    /// </summary>
    public bool AllowFollowUp { get; private set; }
    /// <summary>
    /// allow self&#39;s alacrity
    /// </summary>
    public bool AllowAlacrity { get; private set; }
    /// <summary>
    /// allow foe&#39;s attack
    /// </summary>
    public bool AllowCounter { get; private set; }

    public const int __ID__ = -1141778277;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "SkillName:" + SkillName + ","
        + "AttackMultiplier:" + AttackMultiplier + ","
        + "AttackCount:" + AttackCount + ","
        + "RangeMin:" + RangeMin + ","
        + "RangeMax:" + RangeMax + ","
        + "Weapon:" + Bright.Common.StringUtil.CollectionToString(Weapon) + ","
        + "AllowVantage:" + AllowVantage + ","
        + "AllowFollowUp:" + AllowFollowUp + ","
        + "AllowAlacrity:" + AllowAlacrity + ","
        + "AllowCounter:" + AllowCounter + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
