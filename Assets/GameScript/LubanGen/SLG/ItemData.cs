//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.SLG
{

public sealed partial class ItemData :  Bright.Config.BeanBase 
{
    public ItemData(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["Notes"].IsString) { throw new SerializationException(); }  Notes = _json["Notes"]; }
        { if(!_json["JPName"].IsString) { throw new SerializationException(); }  JPName = _json["JPName"]; }
        { if(!_json["ItemType"].IsNumber) { throw new SerializationException(); }  ItemType = (SLG.ItemType)_json["ItemType"].AsInt; }
        { if(!_json["DmgType"].IsNumber) { throw new SerializationException(); }  DmgType = (SLG.DamageType)_json["DmgType"].AsInt; }
        { if(!_json["Might"].IsNumber) { throw new SerializationException(); }  Might = _json["Might"]; }
        { if(!_json["Hit"].IsNumber) { throw new SerializationException(); }  Hit = _json["Hit"]; }
        { if(!_json["Critical"].IsNumber) { throw new SerializationException(); }  Critical = _json["Critical"]; }
        { if(!_json["Weight"].IsNumber) { throw new SerializationException(); }  Weight = _json["Weight"]; }
        { if(!_json["Avoid"].IsNumber) { throw new SerializationException(); }  Avoid = _json["Avoid"]; }
        { if(!_json["Dodge"].IsNumber) { throw new SerializationException(); }  Dodge = _json["Dodge"]; }
        { var __json0 = _json["Range"]; if(!__json0.IsArray) { throw new SerializationException(); } Range = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Range.Add(__v0); }   }
        { if(!_json["Rank"].IsNumber) { throw new SerializationException(); }  Rank = (SLG.WeaponRank)_json["Rank"].AsInt; }
        { if(!_json["Uses"].IsNumber) { throw new SerializationException(); }  Uses = _json["Uses"]; }
        { if(!_json["Price"].IsNumber) { throw new SerializationException(); }  Price = _json["Price"]; }
        { if(!_json["StaffEXP"].IsNumber) { throw new SerializationException(); }  StaffEXP = _json["StaffEXP"]; }
        { if(!_json["Description"].IsString) { throw new SerializationException(); }  Description = _json["Description"]; }
        { var __json0 = _json["EquipSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } EquipSkills = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  EquipSkills.Add(__v0); }   }
        { var __json0 = _json["PassiveSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } PassiveSkills = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  PassiveSkills.Add(__v0); }   }
        PostInit();
    }

    public ItemData(int ID, string Name, string Notes, string JPName, SLG.ItemType ItemType, SLG.DamageType DmgType, int Might, int Hit, int Critical, int Weight, int Avoid, int Dodge, System.Collections.Generic.List<int> Range, SLG.WeaponRank Rank, int Uses, int Price, int StaffEXP, string Description, System.Collections.Generic.List<string> EquipSkills, System.Collections.Generic.List<string> PassiveSkills ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.Notes = Notes;
        this.JPName = JPName;
        this.ItemType = ItemType;
        this.DmgType = DmgType;
        this.Might = Might;
        this.Hit = Hit;
        this.Critical = Critical;
        this.Weight = Weight;
        this.Avoid = Avoid;
        this.Dodge = Dodge;
        this.Range = Range;
        this.Rank = Rank;
        this.Uses = Uses;
        this.Price = Price;
        this.StaffEXP = StaffEXP;
        this.Description = Description;
        this.EquipSkills = EquipSkills;
        this.PassiveSkills = PassiveSkills;
        PostInit();
    }

    public static ItemData DeserializeItemData(JSONNode _json)
    {
        return new SLG.ItemData(_json);
    }

    public int ID { get; private set; }
    /// <summary>
    /// Name
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// Notes
    /// </summary>
    public string Notes { get; private set; }
    /// <summary>
    /// ID
    /// </summary>
    public string JPName { get; private set; }
    /// <summary>
    /// Type
    /// </summary>
    public SLG.ItemType ItemType { get; private set; }
    public SLG.DamageType DmgType { get; private set; }
    /// <summary>
    /// Might
    /// </summary>
    public int Might { get; private set; }
    /// <summary>
    /// Hit
    /// </summary>
    public int Hit { get; private set; }
    /// <summary>
    /// Critical
    /// </summary>
    public int Critical { get; private set; }
    /// <summary>
    /// Weight
    /// </summary>
    public int Weight { get; private set; }
    /// <summary>
    /// Avoid
    /// </summary>
    public int Avoid { get; private set; }
    /// <summary>
    /// Dodge
    /// </summary>
    public int Dodge { get; private set; }
    /// <summary>
    /// Range
    /// </summary>
    public System.Collections.Generic.List<int> Range { get; private set; }
    /// <summary>
    /// Rank
    /// </summary>
    public SLG.WeaponRank Rank { get; private set; }
    /// <summary>
    /// Uses
    /// </summary>
    public int Uses { get; private set; }
    /// <summary>
    /// Price
    /// </summary>
    public int Price { get; private set; }
    /// <summary>
    /// Staff EXP
    /// </summary>
    public int StaffEXP { get; private set; }
    /// <summary>
    /// Description
    /// </summary>
    public string Description { get; private set; }
    /// <summary>
    /// Equip Skills
    /// </summary>
    public System.Collections.Generic.List<string> EquipSkills { get; private set; }
    /// <summary>
    /// Passive Skills
    /// </summary>
    public System.Collections.Generic.List<string> PassiveSkills { get; private set; }

    public const int __ID__ = 1630175837;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "Notes:" + Notes + ","
        + "JPName:" + JPName + ","
        + "ItemType:" + ItemType + ","
        + "DmgType:" + DmgType + ","
        + "Might:" + Might + ","
        + "Hit:" + Hit + ","
        + "Critical:" + Critical + ","
        + "Weight:" + Weight + ","
        + "Avoid:" + Avoid + ","
        + "Dodge:" + Dodge + ","
        + "Range:" + Bright.Common.StringUtil.CollectionToString(Range) + ","
        + "Rank:" + Rank + ","
        + "Uses:" + Uses + ","
        + "Price:" + Price + ","
        + "StaffEXP:" + StaffEXP + ","
        + "Description:" + Description + ","
        + "EquipSkills:" + Bright.Common.StringUtil.CollectionToString(EquipSkills) + ","
        + "PassiveSkills:" + Bright.Common.StringUtil.CollectionToString(PassiveSkills) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
