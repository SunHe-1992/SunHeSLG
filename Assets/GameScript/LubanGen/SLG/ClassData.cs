//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.SLG
{

public sealed partial class ClassData :  Bright.Config.BeanBase 
{
    public ClassData(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["Description"].IsString) { throw new SerializationException(); }  Description = _json["Description"]; }
        { if(!_json["ClassType"].IsNumber) { throw new SerializationException(); }  ClassType = (SLG.ClassType)_json["ClassType"].AsInt; }
        { if(!_json["FemaleOnly"].IsBoolean) { throw new SerializationException(); }  FemaleOnly = _json["FemaleOnly"]; }
        { if(!_json["Movement"].IsNumber) { throw new SerializationException(); }  Movement = _json["Movement"]; }
        { if(!_json["BaseAttr"].IsObject) { throw new SerializationException(); }  BaseAttr = SLG.BasicStats.DeserializeBasicStats(_json["BaseAttr"]);  }
        { if(!_json["Growth"].IsObject) { throw new SerializationException(); }  Growth = SLG.BasicStats.DeserializeBasicStats(_json["Growth"]);  }
        { if(!_json["Cap"].IsObject) { throw new SerializationException(); }  Cap = SLG.BasicStats.DeserializeBasicStats(_json["Cap"]);  }
        PostInit();
    }

    public ClassData(int ID, string Name, string Description, SLG.ClassType ClassType, bool FemaleOnly, int Movement, SLG.BasicStats BaseAttr, SLG.BasicStats Growth, SLG.BasicStats Cap ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.Description = Description;
        this.ClassType = ClassType;
        this.FemaleOnly = FemaleOnly;
        this.Movement = Movement;
        this.BaseAttr = BaseAttr;
        this.Growth = Growth;
        this.Cap = Cap;
        PostInit();
    }

    public static ClassData DeserializeClassData(JSONNode _json)
    {
        return new SLG.ClassData(_json);
    }

    public int ID { get; private set; }
    public string Name { get; private set; }
    public string Description { get; private set; }
    public SLG.ClassType ClassType { get; private set; }
    public bool FemaleOnly { get; private set; }
    public int Movement { get; private set; }
    public SLG.BasicStats BaseAttr { get; private set; }
    public SLG.BasicStats Growth { get; private set; }
    public SLG.BasicStats Cap { get; private set; }

    public const int __ID__ = 1152306242;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        BaseAttr?.Resolve(_tables);
        Growth?.Resolve(_tables);
        Cap?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        BaseAttr?.TranslateText(translator);
        Growth?.TranslateText(translator);
        Cap?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "Description:" + Description + ","
        + "ClassType:" + ClassType + ","
        + "FemaleOnly:" + FemaleOnly + ","
        + "Movement:" + Movement + ","
        + "BaseAttr:" + BaseAttr + ","
        + "Growth:" + Growth + ","
        + "Cap:" + Cap + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
