
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class ItemData : Luban.BeanBase
{
    public ItemData(JSONNode _buf) 
    {
        { if(!_buf["ID"].IsNumber) { throw new SerializationException(); }  ID = _buf["ID"]; }
        { if(!_buf["Name"].IsString) { throw new SerializationException(); }  Name = _buf["Name"]; }
        { if(!_buf["Notes"].IsString) { throw new SerializationException(); }  Notes = _buf["Notes"]; }
        { if(!_buf["JPName"].IsString) { throw new SerializationException(); }  JPName = _buf["JPName"]; }
        { if(!_buf["ItemType"].IsNumber) { throw new SerializationException(); }  ItemType = (SLG.ItemType)_buf["ItemType"].AsInt; }
        { if(!_buf["DmgType"].IsNumber) { throw new SerializationException(); }  DmgType = (SLG.DamageType)_buf["DmgType"].AsInt; }
        { if(!_buf["Might"].IsNumber) { throw new SerializationException(); }  Might = _buf["Might"]; }
        { if(!_buf["Hit"].IsNumber) { throw new SerializationException(); }  Hit = _buf["Hit"]; }
        { if(!_buf["Critical"].IsNumber) { throw new SerializationException(); }  Critical = _buf["Critical"]; }
        { if(!_buf["Weight"].IsNumber) { throw new SerializationException(); }  Weight = _buf["Weight"]; }
        { if(!_buf["Avoid"].IsNumber) { throw new SerializationException(); }  Avoid = _buf["Avoid"]; }
        { if(!_buf["Dodge"].IsNumber) { throw new SerializationException(); }  Dodge = _buf["Dodge"]; }
        { var __json0 = _buf["Range"]; if(!__json0.IsArray) { throw new SerializationException(); } Range = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Range.Add(__v0); }   }
        { if(!_buf["Rank"].IsNumber) { throw new SerializationException(); }  Rank = (SLG.WeaponRank)_buf["Rank"].AsInt; }
        { if(!_buf["Uses"].IsNumber) { throw new SerializationException(); }  Uses = _buf["Uses"]; }
        { if(!_buf["Price"].IsNumber) { throw new SerializationException(); }  Price = _buf["Price"]; }
        { if(!_buf["StaffEXP"].IsNumber) { throw new SerializationException(); }  StaffEXP = _buf["StaffEXP"]; }
        { if(!_buf["Description"].IsString) { throw new SerializationException(); }  Description = _buf["Description"]; }
        { var __json0 = _buf["EquipSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } EquipSkills = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  EquipSkills.Add(__v0); }   }
        { var __json0 = _buf["PassiveSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } PassiveSkills = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  PassiveSkills.Add(__v0); }   }
    }

    public static ItemData DeserializeItemData(JSONNode _buf)
    {
        return new ItemData(_buf);
    }

    public readonly int ID;
    /// <summary>
    /// Name
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// Notes
    /// </summary>
    public readonly string Notes;
    /// <summary>
    /// ID
    /// </summary>
    public readonly string JPName;
    /// <summary>
    /// Type
    /// </summary>
    public readonly SLG.ItemType ItemType;
    public readonly SLG.DamageType DmgType;
    /// <summary>
    /// Might
    /// </summary>
    public readonly int Might;
    /// <summary>
    /// Hit
    /// </summary>
    public readonly int Hit;
    /// <summary>
    /// Critical
    /// </summary>
    public readonly int Critical;
    /// <summary>
    /// Weight
    /// </summary>
    public readonly int Weight;
    /// <summary>
    /// Avoid
    /// </summary>
    public readonly int Avoid;
    /// <summary>
    /// Dodge
    /// </summary>
    public readonly int Dodge;
    /// <summary>
    /// Range
    /// </summary>
    public readonly System.Collections.Generic.List<int> Range;
    /// <summary>
    /// Rank
    /// </summary>
    public readonly SLG.WeaponRank Rank;
    /// <summary>
    /// Uses
    /// </summary>
    public readonly int Uses;
    /// <summary>
    /// Price
    /// </summary>
    public readonly int Price;
    /// <summary>
    /// Staff EXP
    /// </summary>
    public readonly int StaffEXP;
    /// <summary>
    /// Description
    /// </summary>
    public readonly string Description;
    /// <summary>
    /// Equip Skills
    /// </summary>
    public readonly System.Collections.Generic.List<string> EquipSkills;
    /// <summary>
    /// Passive Skills
    /// </summary>
    public readonly System.Collections.Generic.List<string> PassiveSkills;
   
    public const int __ID__ = 1241678205;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "Notes:" + Notes + ","
        + "JPName:" + JPName + ","
        + "ItemType:" + ItemType + ","
        + "DmgType:" + DmgType + ","
        + "Might:" + Might + ","
        + "Hit:" + Hit + ","
        + "Critical:" + Critical + ","
        + "Weight:" + Weight + ","
        + "Avoid:" + Avoid + ","
        + "Dodge:" + Dodge + ","
        + "Range:" + Luban.StringUtil.CollectionToString(Range) + ","
        + "Rank:" + Rank + ","
        + "Uses:" + Uses + ","
        + "Price:" + Price + ","
        + "StaffEXP:" + StaffEXP + ","
        + "Description:" + Description + ","
        + "EquipSkills:" + Luban.StringUtil.CollectionToString(EquipSkills) + ","
        + "PassiveSkills:" + Luban.StringUtil.CollectionToString(PassiveSkills) + ","
        + "}";
    }
}

}
